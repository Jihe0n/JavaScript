0. css는 casecade style sheet 로 
    이름에도 casecade가 들어가는 것처럼 굉장히 중요한 개념임 
    사용되는 곳에서 더 가까이 에서 선언 될수록 우선순위가 높음 
    ex) 더 아래 선언한것이 높고, 헤드에서 선언한 것보다 태그에서 직접 선언한것이 높고 등등 
    media쿼리 작성할때 주의 

1. 셀렉터에서 상태를 나타낼때는 콜론(:)을 사용  
    ex) button:hover  // 버튼에 마우스를 올렸을때 
    a:link, a:visited, a:active 등  

2. 셀렉터에서 속성을 나타낼 때는 소괄호([]) 사용 
    ex) a[href]{ a태그에 href 속성이 있는 태그
    }
    a[href=""] // href가 특정 url을 갖는경우
    ※정규표현식을 써서도 사용가능 
    a[href^="naver"] // ^로 'naver'로 시작하는문자
    a[href$=".com"] // $로 '.com'으로 끝나는 문자 
    a[href*="nettuts"] // *로 'nettuts'를 포함하는 문자  

3. 셀렉터 a,b {} // a태그, b태그 전부 선택

4. 셀렉터 a + b // (인접 선택자) a태그 바로 뒤에있는 형제태그. 중요한건 같은 깊이에있는 형제 태그중에 바로다음꺼  

5. 셀렉터 a ~ b // a + b 굉장히 비슷하지만 +는 첫번째꺼 하나만, ~는 모든 b태그를 가져옴

6. 셀렉터 a > b // a태그 바로 하위에있는 직계자식인 b 태그 // 여러개면 다 선택됨 

7. 셀렉터 a:first-child // 말그대로 a태그의 첫번째 자식 
    plate > orage:first-child // 접시에 놓여있는 오렌지중에 첫번째 오렌지만 선택 

8. 셀렉터 div:empty // 비어있는 div태그 전부다 선택

9. display 
    // block, inline, inline-bock 
    1. block은 한줄에하나인 상자 // 대표적인 div 
    2. inline은 css를 무시하고 안의 내용물에 크기에 맞게 자기 크기가 결정됨 그리고
        공간이 허용하면 다른태그 옆에 들어갈수 있음 // 대표적인 span
    3. inline-block은 둘의 특성을 다 가져온건데 block지만 inline 처럼 크기가 맞으면 한줄에 여러개가 들어감
    ※inline방식은 너비와 높이가 무시됨 

10. position 
    css에서 초기값을 static 으로 해놓음 >> offset값을 무시하고 그냥 자기위치에 정적으로 위치 
        offset이란 > left, right, top, botton 
    relative // 원래위치에서 상대적 이동 (상대위치)
    absolute // 나의 직계부모 태그를 기준으로 상대적 이동 (포지션이 지정된 부모로 부터 절대위치)
    fixed // 완전히 벗어나서 페이지 기준으로 상대적 이동  (절대위치) // 스크롤을 움직여도 그대로임 
    sticky //  sticky 영역의 x 또는 y 위치값이 설정한 위치에 도달하기 전까지는 static, 
               도달 이후에는 fixed처럼 행동

11. Flexbox  // css의 꽃 >> 레이아웃
    특징1. container의 속성과 item의 속성이 존재
    특징2. 메인축과 반대축이 존재 

    
    align >> 현재 컨테이너의 정렬방식의 반대축 정렬방식
    justfy >> 현재 컨테이너의 정렬방식의 같은 축 정렬방식

    container 속성 
        display: flex // 너는 이제 Flexbox야 
        flex-direction: row // 기본값 row ->, row-reverse <-, colume ↓, colume-reverse ↑
            메인축을 어떻게 설정할 것인지 
        flex-wrap: nowrap // 기본값 nowrap 으로 Flexbox를 래핑을 할거야? 
            nowrap은 브라우저 크기에 상관없이 무조건 한줄에다붙여. wrap은 한줄에 꽉차면 다음줄로 넘어감
        justfy-content: // 중심축에서 item들을 어떻게 배치할 것 인지?
        align-content: // 중심축의 반대축에서 어떻게 배치할 거야?
            flex-start // 초기값으로 설정됨 // 축방향의 시작점에서 부터 시작 
            flex-end // 축방향의 끝방향으로 끝나게 
            center // 중앙 
            space-around // 아이템에 space를 씌움 
            space-evenly // 전부다 같은 간격 
            space-between // 양쪽끝은 축에딱 붙게하고 나머지 같은간격 
        
    item 속성 
        flex-grow: // item들이 원래 크기를 유지하는데 grow를 주면 부모에 따라 크기가 따라 늘어남 // 기본값 0 
        flex-shrink // item들이 부모의 사이즈가 작아질때 얼마나 줄어들지  // 기본값 1 
        flex-basis // 위에 두개를 그냥 묶어서 부모의 %로 정의 

            

12. em vs rem 
    rem을 쓰면 부모의 폰트 사이즈에 관계없이 페이지 어디에서 쓰이던 고정한 값을 가진다
    rem의 r은 root를 뜻하며 브라우저의 기본 사이즈 16px를 1rem으로 계산됨 
    나의 component가 페이지 어디에서 사용되던 그대로 고정되야 한다면 rem

    em은 부모의 폰트 사이즈에 따라 상대적으로 변함 %와 굉장히 흡사함
    내 component가 어디에서 사용되냐에 따라서 유동적으로 변해야한다면 em 

    em, rem은 값이 유동적이긴 하지만 결국 폰트사이즈에 따라 변하기 때문에 일반적으로 고정적인 값을 가짐
    그렇기 때문에 contents를 물과같이 유동적으로 만들기 위해서는 %를 써야만 함 


13. margin 겹침
    1. 두 태그사이의 margin중에서 큰값이 두 태그사이의 거리가 된다
        a태그의 margin과 b태그의 margin이 겹쳐져서 되지않음 
    2. 부모와 자식의 margin 겹침 
        부모 엘리먼트가 시각적인 요소가 없는 상태라면 부모자식중에 큰 마진값이 자식 태그의 마진으로 사용된다
    

14. Multi column
    가독성을 위해서 긴문장을 신문처럼 여러 문단으로 쪼개서 보여주는 것 
    column-count:  // 문단을 개수로 나누기 
    column-width: // 문단의 폭으로 단의 수를 나눠줌 

15. media query 
    다양한 미디어에서 반응형으로 동작하는 것. 반응형의 핵심 기술 
    @media() { selecter{} }
    max-width:100px // 최대 너비가 100px일때 라는 의미 이니까 브라우저가 100px 이하인 경우를 뜻함
    min-width:100px // 최소 너비가 100px일때 동작 한다는 것이니까 결국 100px 이상은 동작 한다는 뜻
    casecade가 다른 css랑 우선순위 때문에 적용 안되는 경우를 잘 파악하자


16. float  // 주로 레이아웃을 잡을때 flex를 쓰지만 간혹 쓰는 경우가 있음 
    띄우다는 의미로 사진같은거 넣고 ㄱ자나 ㄴ모양으로 글자 쓰는 레이아웃을 쉽게 사용할 수 있는 것
    쉽게 사진을 띄운다 라고 생각하자. 주위로 다른 컨텐츠가 흐르듯이 배치가 됨 


17. clear 
    float 속성을 사용하면 주변으로 컨텐츠가 흐르듯이 배치가 되는데, 이를 해제하기 위해 clear 속성을 사용합니다.
    clear 속성이 지정된 영역 이후로는 더 이상 float가 작동하지 않습니다.
    속성값: left는 left로 된 float를 제거하고 속성값 right는 right로 된 float를 제거, both는 양쪽다 제거


18. box-sizing 
    엘리먼트의 너비와 높이는  border를 포함한 눈에 보이는 크기가 아니라 실제 border를 제외한 content의 크기로
    계산 되기때문에 계산 함에 있어 힘들때가 있다.
    box-sizing: content-box // 기본값 
    box-sizing: border-box // 보더까지 해서 너비와 높이가 정의됨 >> 예측하기 쉬운 결과가 나옴


19. filter 
    이미지, 텍스트등 그래픽 대상에서 포토샵등고 같이
    특수효과를 줄 수 있는 옵션


20. background-size: cover , contain
    cover는 이미지가 잘리더라도 부모 크기에 꽉차게 배경 이미지를 줌
    contain은 빈칸이 나오더라도 원래 비율을 유지해서 보여줌  

21. blend, transform 
    굉장히 포토샵과 유사한 기능들 
    blend >> 사진, 배경색 등을 섞어서 다양한 효과를 만듬
    transform >> 이미지를 벡터, 좌표, 각도 등 여러가지로 돌리고 바꾸고 만드는 효과 


22. 가상 선택자
    별도의 class를 지정하지 않아도 지정한 것 처럼요소를 선택할 수 있다 >> 예를들면 첫번째 자식을 가져오는 
    first-child를 하면 그 전체 element값에 대한 선택자로 사용할 수 있기때문  
        :link - 방문한 적이 없는 링크
        :visited - 방문한 적이 있는 링크
        :hover - 요소에 마우스가 올라간 상태
        :active - 마우스를 클릭했을 때
        :focus - 포커스 되었을 때 (input 태그 등)
        :first-child - 첫번째 자식
        :last-child - 마지막 자식

23. 가상 요소 
    가상선택자 처럼 선택자에 추가되며, 존재하지 않는 요소를 존재하는 것처럼 부여하여 문서의 특정 부분 선택이 가능
    ::brfore - 셀렉터로 선택한 엘리먼트 앞에 content 삽입
    ::after  - 셀렉터로 선택한 엘리먼트 뒤에 content 삽입 
    ※content는 ::before와 ::after를 쓸 땐 꼭 필요한 속성이며 가상요소임 
    content 속성에는 HTML 태그의 속성 값을 가져오는 attr() 함수를 사용할 수 있다.

24. trasition (장면전환)
    css 속성을 변경할때 애니메이션 속도를 조절하는 방법
    무언가를 변환하는데 딱 한번에 몇하는 것보다 시간을 정해놓으면 차차 변하면서 부드럽게 움직이는 효과를 줄 수 있음
    trasition 속성 시간 으로 선언함 
    ex) trasition font-size 1s // 선택된 태그에 대한 font-size에 대한 값이 바뀔때 1초 동안 변화가 진행됨

25. 코드 경량화(minify) 
    사용자의 편의를 위해 사용한 코드의 줄바꿈, 들여쓰기 등을 생략해서 사람이 알아보기는 
    어렵지만 코드를 압축하여 배포할때 효율적으로 하는 것   



