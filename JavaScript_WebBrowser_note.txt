
1. JS를 inline 방식으로 직접 HTML에 사용하는 것은 직관적이고 편하다 라는 장점이 있지만 유지보수 및
    검색엔진 등의 문제가 발생하고 정보로써의 가치가 떨어진다. 정보와 제어를 같이 두는 것은 효율적이지 않다
    

2. HTML에서 script태그의 위치는 ?
    head 태그에서 엘리먼트등을 정의해서 스크립트를 작성하면 아직 body안에있는 태그들이 읽히기 전의 상황이기때문에
    javascript는 오류를 발생한다 이는 window.onload 라는 웹페이지가 완전히 로드가 되었을때 실행하는 메소드로 
    해결할 수 있는 방법이 있지만 속도적인 측면도 있고 번거롭기때문에
    가급적이면 body태그의 끝나는 지점에 스크립트를 작성하는것이 좀더 바람직 

3. Object Model 
    브라우저를 제어하기위해서는 객체가 필요한데 Object Model 이라는 것은 우리가 자바스크립트로 브라우저를
    제어할 수 있도록 브라우저의 여러 구성을 객체로 만들어서 제공하는 것 
    따라서 웹브라우저가 객체를 만들어서 준비를 해놓고 우리는 자바스크립트로써 브라우저를 제어할 수 있는 것 



4.  dom // Document Object Model 
    모든 htlm 태그들은 우리가 지정해주진 않았지만 자바스크립트가 객체화를 시켜놓는다
    단순 텍스트로 구성된 HTML 문서의 내용과 구조가 객체 모델로 변환되어 다양한 프로그램에서 사용될 수 있다는 것
    DOM의 개체 구조는 “노드 트리”로 표현
    DOM은 HTML 문서에 대한 인터페이스입니다. 첫째로 뷰 포트에 무엇을 렌더링 할지 결정하기 위해 사용되며,
    둘째로는 페이지의 콘텐츠 및 구조, 그리고 스타일이 자바스크립트 프로그램에 의해 수정되기 위해 사용됩니다.


5. bom // Browser Object Model 
    브라우저의 url이나 리로드를한다거나 경고창을 띄운다거나, 하는 오브젝트 모델 

6.  confirm (확인 / 취소)
    prompt (입력값을 받아옴)

7.  location 객체 // url과 관련됨 
    location.href, location.toString (현재 윈도우의 url)
    location.href의 경우 다른 값으로 변경해주면 그 url로 이동함

8. navigator 객체 // 현재환경, os, 버전등의 브라우저 정보를 제공해주는 객체

9. onkeypress="func(this.value)"  
    onkeypress는 사용자가 input에 입력할때마다 실행 하는 함수 this.value는 그 순간의 text안의 값

10. 제어대상 찾기 
    getElementsByTagName  // 태그 이름으로 검색
    getElementsByClassName  // 클래스 이름으로 검색
    getElementById // id값으로 검색 (id는 중복될 수 없음)

10.1 객체 스타일 쉽게 바꾸기
    getElementById('').style.color='red'    

11. getElements는 말그대로 복수형(s) 이므로 유사배열에 담겨서 반환된다

12. .textContent // 객체의 태그안에 text값을 반환

13. querySelector // css처럼 선택자를 사용하여 입력을 받고 그 선택자에 해당하는 객체를 반환해줌
    querySelector('셀렉터') // 대상 셀렉터를 정함, 여러개일 경우 먼저오는 한개만 리턴 
    querySelectorAll('셀렉터')  /// 해당 셀렉터 를가진 모든 태그들을 배열로 가져와줌 ( 정확히는 노드리스트)


14. jquery에서의 제어대상 찾기
    '$' 는 jquery funtion 이라고 부르고 뒤에는 주로 css처럼 선택자가 오게되며 jquery 객체가 리턴됨
    $('선택자').method('속성','값') // jquery객체의 메소드를 통해서 객체의 *모든* 엘리먼트에 메소드를 실행

15. HTMLCollection // 리턴결과가 복수를 갖을때 갖는 객체 (유사배열)
    찾은 제어대상이 하나의 엘리먼트가 아니라 여러 엘리먼트라면 HTMLCollection 타입을 갖게된다
    *목록이 실시간으로 갱신된다* >> 만약에 제어대상을 찾고 HTMLCollection 객체가 만들어진 다음에
    그에 맞는 태그가 삭제되거나 추가되어 변경되었다 해도 실시간으로 HTMLCollection에 반영된다

16. jquery 객체의 특징 
    대부분의 jquery 메소드들이 2개의 인자를 입력하면 속성을 값으로 설정하는 것이고 
    두번째 인자없이 속성이라는 첫번째 인자만 입력하면 현재 그 속성 값을 가지고옴 
    근데 설정할때는 모든 엘리먼트가 전부 설정되지만 가져올때는 맨처음 엘리먼트만 가져와짐

17. jquery객체로 변환 
    돔객체는 jQuery객체의 메소드를 사용할 수 없기때문에 $(dom_obj)를 통해 jquery객체로 변환하고
    .css와 같은 jquery메소드를 사용할 수 있다 
 
18. jquery.map(function(inx,elem){ }) // jquery의 map함수
    파이썬의 매핑함수와 enum함수와 유사함 jquery객체의 모든값을 인덱스와 dom객체로 값을 주고 
    크기만큼 돌면서 함수안의 내용을 매핑하는 함수 내부에서 jquery를 쓸려면 $(elem)으로 jquery객체로 바꿔줘야함

19. Element 객체
    getElements로 얻은 객체들은 HTML<TAG>Element 객체이고 얘는 HTMLElement을 상속하고 얘는 또 Element를 상속한다
    따라서 모든 객체는 Element의 객체의 메소드를 사용할 수 있다.
        <식별자 api>
        .tagname // 변경 불가능
        .id // 변경가능 
        .className // 변경가능 
        .classList // 기존의 className의 단점을 보완해서 유사배열로 클래스 리스트를 관리
            classList의 domtoken은 add()와 remove() 메소드를 가지고있어서 쉽게 클래스 추가, 삭제 가능

        <조회 api> // document.getElement는 문서전체지만, 검색의 범위를 특정 Element로 좁힐때 사용  
        .getElementsBy* // 그 엘리먼트 하위에서 검색 

        <속성 api>
        .getAttribute('a') // a라는 속성의 값을 가져옴   
        .setAttribute('a','b') // a라는 속성의 값을 b로 변경함    


20. Element, attribute의 구분
    <div class= ‘my-class’></div> 에서 
    <div> -> Element // 태그는 엘리먼트라고 생각하자
    class -> attribute

21. property의 의미
    html DOM 안에서 attribute 를 가리키는(혹은 대신하는) 표현, 참고로 Dom에서는 class는 className


22. attribute vs property 
    document.getElementsById('target')로 가져온 객체의 이름을 'target' 이라고 할때
    target.setAttribute('class','newclass')와 같이 Attribute방식으로 class를 준 방법과
    target.className = 'newclass'과 같이 객체의 프로퍼티 방식으로 class를 준 방법 
    프로퍼티 방식이 더 짧고 간편하지만 JS의 예약어 때문에 class를 className으로 선언 해야하는 등
    오류를 야기할 수 있기때문에 주의할 필요가 있음
    결론으로 둘은 같은 동작을 하는 것같지만 속성제어시 다르게 동작하는 경우가 있음 
    attribute 는 html 문서 안에서의 정적인(바뀌지 않는) 속성 그 자체를 의미하고, 
    property 는 html DOM 안에서 동적인(바뀌는) 속성(또는 그 값)을 의미합니다.


23. jQuery객체의 속성제어 
    jquery_obj.attr('a') // jquery 객체의 a라는 속성을 가져옴 // dom의 getAttribute
    jquery_obj.attr('a','b') // jquery 객체의 a라는 속성값을 b로 변경 // dom의 setAttribute


24. jQuery에서도 attribute방식과 property방식을 구분해서 속성제어가 가능 
    jquery_obj.attr('a') // attribute 방식으로 제어 
    jquery_obj.prop('a') // property 방식으로 제어 

25. jQuery 조회범위를 제한
    $("#activ .marked").css("color","red")
    $('#activ').find('.marked').css("color","red")
    두 코드는 동일한 코드로 id="activ" 태그 하위에 class="marked"인 태그를 전부 선택하는 객체
    즉 find는 앞의 객체의 하위에서 인자인 셀렉터를 검색한다는 의미


26. node 객체
    dom객체의 시조이며 html의 모든 객체의 뿌리
    각각의 구성요소간의 자식, 형제 등의 관계를 나타내거나 각 노드의 종류, 값등을 정의하는 api


27. node 타입
    일반적인 태그는 Element 타입 노드이고, 문자와 같은 값은 text 타입 노드 라고 함
    줄바꿈, 공백과 같은 것도 엄연히 하나의 text타입 노드임


28. node 객체에서 <관계>를 나타내는 메소드
    obj.firstChild // 하위 노드에서 바로 다음에 오는 노드로 이동 , text타입 주의 
    obj.firstElementChild  // 말그대로 하위노드에서 text등을 제외한 엘리먼트 노드로 이동 
    obj.parentNode // 부모 노드로 이동 
    obj.childNodes // 하위객체의 모든 node를 찾아줌 
    모든 엘리먼트, 텍스트, 주석 등 즉 html의 모든 구성요소의 객체는 공통적으로 node객체를 상속하기 때문에 
    firstChild, nextcibling, parentNode 등의 프로퍼티를 사용할 수 있다.


29. nodeType, nodeName // 필요한 노드를 필터링 할때 유용
    Element node = 1 , text node = 3 등의 이미 정해진 상수가 있고 (숫자에 해당하는 텍스트로도 가능)
    정해진 숫자를 통해서 그 Element가 어떠한 타입의 노드인지 체크하는 메소드  
    nodeName은 a태그는 'A', body태그는 'BODY' 등으로 노드의 이름을 반환 

30. node 추가, 삭제의 방법 
    노드를 추가하는 건 node단 에서 하지만 노드를 추가할 엘리먼트를 생성하고 node를 추가해야 하기때문에
    document단에서 먼저 Element를 생성하여 노드를 추가한다
    ** 결국 추가하려는 노드를 생성할때 노드객체가 아니라 document 객체를 사용해야 한다 


31. target = document.createElement("a") // a라는 엘리먼트 생성
    단순 태그만 만든상태이므로 <a></a> 인 비어있는상태

32. content = document.createTextNode("hello") // "hello" 라는 텍스트 노드를 만든 것 

33. target.appendChild(content) // content를 target의 하위 노드로 결합  
    target으로 만든 a태그안에 textnode를 넣어서 <a>hello</a> 를 만듬
    참고로 appendChild를 기존 태그에 추가할 경우 형제들 중에서 제일 끝에 추가가 됨 

34. obj.insertBefore(elem1, elem2)
    앞의 appendChild는 맨뒤에만 추가하는 것이 명확하지만 때에 따라서 맨앞이나 중간에 끼우고 싶기때문에 사용 
    elem1을 elem2의 바로 앞에다가 추가한다 

35. 노드 삭제 
    노드의 삭제는 그 엘리먼트를 직접 접근해서 삭제할 수 없고 그 엘리먼트의 부모 노드의 접근해서
    부모노드의 자식으로써 삭제해야한다 
    target.parentNode.removeChild('target')
    그래서 삭제하려는 대상을 알고있어도 부모까지 알고있어야 삭제할 수 있는 설계상의 문제점이 있음

36. 노드 교체
    교체도 마찬가지로 교체하려는 엘리먼트를 document에서 생성하여 원하는 속성을 주고
    target.replaceChild(obj1, obj2) // obj1을 ~의 child 와같은 obj2의 위치로 교체

37. jquery의 node 추가
        // 여기서 elem은 직접 '<h1>HelloWorld</h1>' 이런식으로 직접 줘도 됨
           그리고 selecter로 선택된 모든대상에 다 적용됨
    $('selecter').before("elem") // 객체 태그 시작 바로전 위치 
    $('selecter').prepend("elem") // 객체 태그가 열리고 바르 다음 위치
    $('selecter').append("elem") // 객체 태그가 닫히기 바로전 위치
    $('selecter').after("elem") // 객체 태그가 닫히고 바로 다음 위치

38. jquery의 node 삭제
    $("selecter").remove() // 객체 전체를 삭제
    $("selecter").empty() // 안의 내용, 즉 텍스트 부분만 삭제

39. jquery의 node 교체 
    replaceAll, replaceWith

40. document 객체
    html문서 전체를 대표하는 객체이자 노드로써 하위 노드로 <!DOCTYPE html>, <html></html>을
    자식으로 갖는걸 보아 문서전체를 대표하는 객체이다
    createElement, createTextNode등으로 노드를 생성하거나, title, url 등 문서정보 관련된 프로퍼티가 있다

41. text객체 
    코드에서 태그안쪽에있는 <p>HelloWorld</p>와 같은 안쪽에 있는 객체를 text객체라고 함 
    결국 html문서에서 실제 데이터를 담고있는 객체

42. text객체의 값찾기 or 값변경
    text_obj.data  
    text_obj.nodeValue 

43. 엘리먼트 내에서 firstChild를 하면 그안쪽에 있는 text node를 선택하게됨

44. input type="text" 에서 value는 textfiled 안에 값을 말함, 초기값을 주면 처음에 박스안의 값 











    jQuery(document).ready(function($) {
        이것의 의미
    });



. innerText, innerHTML ??


이벤트 헨들러 

toString
















































