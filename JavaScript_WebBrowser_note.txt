
1. JS를 inline 방식으로 직접 HTML에 사용하는 것은 직관적이고 편하다 라는 장점이 있지만 유지보수 및
    검색엔진 등의 문제가 발생하고 정보로써의 가치가 떨어진다. 정보와 제어를 같이 두는 것은 효율적이지 않다
    

2. HTML에서 script태그의 위치는 ?
    head 태그에서 엘리먼트등을 정의해서 스크립트를 작성하면 아직 body안에있는 태그들이 읽히기 전의 상황이기때문에
    javascript는 오류를 발생한다 이는 window.onload 라는 웹페이지가 완전히 로드가 되었을때 실행하는 메소드로 
    해결할 수 있는 방법이 있지만 속도적인 측면도 있고 번거롭기때문에
    가급적이면 body태그의 끝나는 지점에 스크립트를 작성하는것이 좀더 바람직 

3. Object Model 
    브라우저를 제어하기위해서는 객체가 필요한데 Object Model 이라는 것은 우리가 자바스크립트로 브라우저를
    제어할 수 있도록 브라우저의 여러 구성을 객체로 만들어서 제공하는 것 
    따라서 웹브라우저가 객체를 만들어서 준비를 해놓고 우리는 자바스크립트로써 브라우저를 제어할 수 있는 것 



4.  dom // Document Object Model 
    모든 htlm 태그들은 우리가 지정해주진 않았지만 자바스크립트가 객체화를 시켜놓는다
    단순 텍스트로 구성된 HTML 문서의 내용과 구조가 객체 모델로 변환되어 다양한 프로그램에서 사용될 수 있다는 것
    DOM의 개체 구조는 “노드 트리”로 표현
    DOM은 HTML 문서에 대한 인터페이스입니다. 첫째로 뷰 포트에 무엇을 렌더링 할지 결정하기 위해 사용되며,
    둘째로는 페이지의 콘텐츠 및 구조, 그리고 스타일이 자바스크립트 프로그램에 의해 수정되기 위해 사용됩니다.


5. bom // Browser Object Model 
    브라우저의 url이나 리로드를한다거나 경고창을 띄운다거나, 하는 오브젝트 모델 

6.  confirm (확인 / 취소)
    prompt (입력값을 받아옴)

7.  location 객체 // url과 관련됨 
    location.href, location.toString (현재 윈도우의 url)
    location.href의 경우 다른 값으로 변경해주면 그 url로 이동함

8. navigator 객체 // 현재환경, os, 버전등의 브라우저 정보를 제공해주는 객체

9. onkeypress="func(this.value)"  
    onkeypress는 사용자가 input에 입력할때마다 실행 하는 함수 this.value는 그 순간의 text안의 값


10. innerText, innerHTML ??






















































